From 79fe25e0b863a169163327bd49d6062de0737872 Mon Sep 17 00:00:00 2001
From: JeannieWu <jeanniew@hyvedesignsolutions.com>
Date: Wed, 11 Sep 2019 16:52:49 +0800
Subject: [PATCH] Support 16 bit FRU and workaround fix for pad error

---
 src/FruDevice.cpp | 16 +++++++++++++---
 1 file changed, 13 insertions(+), 3 deletions(-)

diff --git a/src/FruDevice.cpp b/src/FruDevice.cpp
index b20b0d3..a6c747d 100644
--- a/src/FruDevice.cpp
+++ b/src/FruDevice.cpp
@@ -142,6 +142,7 @@ static int readBlockData(int flag, int file, uint16_t offset, uint8_t len,
 {
     uint8_t lowAddr = static_cast<uint8_t>(offset);
     uint8_t highAddr = static_cast<uint8_t>(offset >> 8);
+    uint8_t index = 0;
 
     if (flag == 0)
     {
@@ -151,13 +152,19 @@ static int readBlockData(int flag, int file, uint16_t offset, uint8_t len,
     /* This is for 16 bit addressing EEPROM device. First an offset
      * needs to be written before read data from a offset
      */
-    int ret = i2c_smbus_write_byte_data(file, 0, lowAddr);
+    int ret = i2c_smbus_write_byte_data(file, highAddr, lowAddr);
     if (ret < 0)
     {
         return ret;
     }
 
-    return i2c_smbus_read_i2c_block_data(file, highAddr, len, buf);
+    while (index < len)
+    {
+        buf[index] = static_cast<uint8_t>(i2c_smbus_read_byte(file));
+        index++;
+    }
+   
+    return len;
 }
 
 bool validateHeader(const std::array<uint8_t, I2C_SMBUS_BLOCK_MAX>& blockData)
@@ -171,7 +178,8 @@ bool validateHeader(const std::array<uint8_t, I2C_SMBUS_BLOCK_MAX>& blockData)
     // verify pad is set to 0
     if (blockData[6] != 0x0)
     {
-        return false;
+        //workaround fix for HS9216 
+        //return false;
     }
 
     // verify offsets are 0, or don't point to another offset
@@ -411,6 +419,8 @@ int getBusFrus(int file, int first, int last, int bus,
 
             /* Check for Device type if it is 8 bit or 16 bit */
             int flag = isDevice16Bit(file);
+            //force to use 16 bit read method for bus 6 
+            if (bus == 6) flag = 1;
             if (flag < 0)
             {
                 std::cerr << "failed to read bus " << bus << " address " << ii
