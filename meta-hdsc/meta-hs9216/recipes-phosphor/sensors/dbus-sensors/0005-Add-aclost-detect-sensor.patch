From 1e7465f6a3779bf9bb2418552e92d3ab87539ab2 Mon Sep 17 00:00:00 2001
From: Jeannie Wu <jeanniew@hyvedesignsolutions.com>
Date: Tue, 8 Oct 2019 15:49:42 +0800
Subject: [PATCH] Add aclost detect sensor

---
 CMakeLists.txt                                     |  12 ++
 .../xyz.openbmc_project.powersupplysensor.service  |  12 ++
 src/PowerSupplySensorMain.cpp                      | 144 +++++++++++++++++++++
 3 files changed, 168 insertions(+)
 create mode 100644 service_files/xyz.openbmc_project.powersupplysensor.service
 create mode 100644 src/PowerSupplySensorMain.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index fbe62c9..dd069b3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -47,6 +47,7 @@ option (DISABLE_MCUTEMP "Disable installing MCU temperature sensor" OFF)
 option (DISABLE_PSU "Disable installing PSU sensor" OFF)
 option (DISABLE_PROCESSOR "Disable installing processor sensor" OFF)
 option (DISABLE_ACPI "Disable installing acpi sensor" OFF)
+option (DISABLE_POWERSUPPLY "Disable installing powersupply sensor" OFF)
 
 include ("cmake/HunterGate.cmake")
 
@@ -200,6 +201,9 @@ add_executable (acpisensor src/AcpiSensorMain.cpp)
 add_dependencies (acpisensor sdbusplus-project)
 target_link_libraries (acpisensor ${SENSOR_LINK_LIBS})
 
+add_executable (powersupplysensor src/PowerSupplySensorMain.cpp)
+add_dependencies (powersupplysensor sdbusplus-project)
+target_link_libraries (powersupplysensor ${SENSOR_LINK_LIBS})
 
 if (NOT YOCTO)
     add_dependencies (adcsensor ${EXTERNAL_PACKAGES})
@@ -213,6 +217,7 @@ if (NOT YOCTO)
     add_dependencies (psusensor ${EXTERNAL_PACKAGES})
     add_dependencies (processorsensor ${EXTERNAL_PACKAGES})
     add_dependencies (acpisensor ${EXTERNAL_PACKAGES})
+    add_dependencies (powersupplysensor ${EXTERNAL_PACKAGES})
 endif ()
 
 set (SERVICE_FILE_SRC_DIR ${PROJECT_SOURCE_DIR}/service_files)
@@ -301,3 +306,10 @@ if (NOT DISABLE_ACPI)
                  ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.acpisensor.service
                  DESTINATION ${SERVICE_FILE_INSTALL_DIR})
 endif ()
+
+if (NOT DISABLE_POWERSUPPLY)
+    install (TARGETS powersupplysensor DESTINATION bin)
+    install (FILES
+                 ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.powersupplysensor.service
+                 DESTINATION ${SERVICE_FILE_INSTALL_DIR})
+endif ()
diff --git a/service_files/xyz.openbmc_project.powersupplysensor.service b/service_files/xyz.openbmc_project.powersupplysensor.service
new file mode 100644
index 0000000..195a2f7
--- /dev/null
+++ b/service_files/xyz.openbmc_project.powersupplysensor.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=IPMI defined PowerSupply Sensor
+StopWhenUnneeded=false
+After=xyz.openbmc_project.EntityManager.service
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/env powersupplysensor
+SyslogIdentifier=powersupply-sensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/PowerSupplySensorMain.cpp b/src/PowerSupplySensorMain.cpp
new file mode 100644
index 0000000..5db674d
--- /dev/null
+++ b/src/PowerSupplySensorMain.cpp
@@ -0,0 +1,144 @@
+/*
+// Copyright (c) 2018 Intel Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+/*Hyve add : this is for establish Power Supply (0x9) sensor */
+
+#include <Utils.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/asio.hpp>
+#include <chrono>
+#include <ctime>
+#include <iostream>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/asio/sd_event.hpp>
+#include <sdbusplus/bus.hpp>
+#include <sdbusplus/exception.hpp>
+#include <sdbusplus/server.hpp>
+#include <sdbusplus/timer.hpp>
+#include <sensor.hpp>
+#include <systemd/sd-journal.h>
+
+
+static constexpr bool DEBUG = true;
+
+static constexpr char const* ipmiSELService =    "xyz.openbmc_project.Logging.IPMI";
+static constexpr char const* ipmiSELPath = "/xyz/openbmc_project/Logging/IPMI";
+static constexpr char const* ipmiSELAddInterface = "xyz.openbmc_project.Logging.IPMI";
+
+static const std::string ipmiSELAddMessage = "SEL Entry";
+static constexpr size_t selEvtDataMaxSize = 3;
+
+
+int main()
+{
+    std::string sensorName;
+    std::string sensorInterface;
+    std::string sensorStateNormal;
+    std::string sensorStateActive;
+    std::string sensorProperty;
+    // setup connection to dbus
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    auto objServer = sdbusplus::asio::object_server(systemBus);
+
+    // setup object server, define interface
+    systemBus->request_name("xyz.openbmc_project.PowerSupplySensor");
+
+    std::shared_ptr<sdbusplus::asio::dbus_interface> iface =
+        objServer.add_interface("/xyz/openbmc_project/sensors/powersupply/ACLost",sensorValueInterface);
+
+    double value = 0;
+    //ray__ test value
+    iface->register_property("Value", value);
+    iface->initialize();
+    
+    auto aclostEventMatcherCallback =
+        [systemBus](sdbusplus::message::message& message) {
+            boost::container::flat_map<std::string, sdbusplus::message::variant<std::string>> propertiesChanged;
+            std::string objectName;
+            std::cerr << "Jeannie__ callback aclostEventMatcher!!!\n";
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+
+            if (DEBUG)
+            {
+                std::cout << message.get_path() << " is changed\n";
+            }
+            std::string sensorPath =  message.get_path();
+            message.read(objectName, propertiesChanged);
+            std::string event = propertiesChanged.begin()->first;
+	 
+            auto variant = sdbusplus::message::variant_ns::get_if<std::string>(
+	        &propertiesChanged.begin()->second);
+
+            if (event.empty() || nullptr == variant)
+            {
+                return;
+            }
+            if (event == "ACBoot")
+            {
+                if (*variant == "True")
+                {
+                    //log redfish
+                    std::string errMsg("ACLost occur");
+                    bool assert=1;
+                    std::string redfishMsgId("ACLost!");
+                    sd_journal_send("MESSAGE=%s", errMsg.c_str(),
+                                    "REDFISH_MESSAGE_ID=%s", redfishMsgId.c_str(), NULL);
+
+                    //log SEL
+                    //powersupply
+                    uint16_t genid = 0x20;
+
+                    std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
+                    //set eventdata1 to 0xb  , for now unspecified byte2 & btye3 , not implement A0 in bit[7:4]
+                    eventData[0] = static_cast<uint8_t>(0xb);  
+                    sdbusplus::message::message writeSEL = systemBus->new_method_call(
+                        ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
+                    writeSEL.append(ipmiSELAddMessage,  std::string("/xyz/openbmc_project/sensors/powersupply/ACLost"), eventData, assert,
+                        genid);
+
+                    
+                    try
+                    {
+                        systemBus->call(writeSEL);
+                    }
+                        catch (sdbusplus::exception_t& e)
+                    {
+                        std::cerr << "call IpmiSelAdd failed\n";
+                    }
+                      
+                }
+                
+            }
+
+        };
+
+    //event trigger, this can move to poll the acboot check sevice
+    sdbusplus::bus::match::match aclostEventMatcher(
+        static_cast<sdbusplus::bus::bus&>(*systemBus),
+        "type='signal',interface='org.freedesktop.DBus.Properties',member='"
+        "PropertiesChanged',arg0namespace='xyz.openbmc_project.Common.ACBoot'",
+        std::move(aclostEventMatcherCallback));
+
+    io.run();
+
+    return 0;
+}
