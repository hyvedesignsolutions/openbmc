From 9ab4698c0f796001afb42f97efe011e7b78ea6c0 Mon Sep 17 00:00:00 2001
From: Ray Lue <ray.lue@mic.com.tw>
Date: Thu, 5 Sep 2019 20:35:05 +0800
Subject: [PATCH] add ipmi ACPI sensor

Note: Original code is from ray, Jeannie add support for acpi command 
change to use seperate pgood and acpi property to fix missing event 
at the first power on process after ac reboot problem
---
 CMakeLists.txt                                |  14 ++
 .../xyz.openbmc_project.acpisensor.service    |  12 ++
 src/AcpiSensorMain.cpp                        | 201 ++++++++++++++++++
 3 files changed, 227 insertions(+), 1 deletion(-)
 create mode 100644 service_files/xyz.openbmc_project.acpisensor.service
 create mode 100755 src/AcpiSensorMain.cpp

diff --git a/CMakeLists.txt b/CMakeLists.txt
index fab0ea4..16d6091 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,6 +20,7 @@ option (DISABLE_IPMB "Disable installing IPMB sensor" OFF)
 option (DISABLE_MCUTEMP "Disable installing MCU temperature sensor" OFF)
 option (DISABLE_PSU "Disable installing PSU sensor" OFF)
 option (DISABLE_PROCESSOR "Disable installing processor sensor" OFF)
+option (DISABLE_ACPI "Disable installing acpi sensor" OFF)

 include ("cmake/HunterGate.cmake")

@@ -168,6 +169,11 @@ add_executable (processorsensor src/ProcessorSensorMain.cpp)
 add_dependencies (processorsensor sdbusplus-project)
 target_link_libraries (processorsensor ${SENSOR_LINK_LIBS})

+add_executable (acpisensor src/AcpiSensorMain.cpp)
+add_dependencies (acpisensor sdbusplus-project)
+target_link_libraries (acpisensor ${SENSOR_LINK_LIBS})
+
+
 if (NOT YOCTO)
     add_dependencies (adcsensor ${EXTERNAL_PACKAGES})
     add_dependencies (cpusensor ${EXTERNAL_PACKAGES})
@@ -179,6 +185,7 @@ if (NOT YOCTO)
     add_dependencies (mcutempsensor ${EXTERNAL_PACKAGES})
     add_dependencies (psusensor ${EXTERNAL_PACKAGES})
     add_dependencies (processorsensor ${EXTERNAL_PACKAGES})
+    add_dependencies (acpisensor ${EXTERNAL_PACKAGES})
 endif ()

 set (SERVICE_FILE_SRC_DIR ${PROJECT_SOURCE_DIR}/service_files)
@@ -259,3 +266,10 @@ if (NOT DISABLE_PROCESSOR)
                  DESTINATION ${SERVICE_FILE_INSTALL_DIR})

 endif ()
+
+if (NOT DISABLE_ACPI)
+    install (TARGETS acpisensor DESTINATION bin)
+    install (FILES
+                 ${SERVICE_FILE_SRC_DIR}/xyz.openbmc_project.acpisensor.service
+                 DESTINATION ${SERVICE_FILE_INSTALL_DIR})
+endif ()
diff --git a/service_files/xyz.openbmc_project.acpisensor.service b/service_files/xyz.openbmc_project.acpisensor.service
new file mode 100644
index 0000000..d03213c
--- /dev/null
+++ b/service_files/xyz.openbmc_project.acpisensor.service
@@ -0,0 +1,12 @@
+[Unit]
+Description=IPMI defined acpi Sensor
+StopWhenUnneeded=false
+After=xyz.openbmc_project.EntityManager.service
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/env acpisensor
+SyslogIdentifier=acpi-sensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/AcpiSensorMain.cpp b/src/AcpiSensorMain.cpp
new file mode 100644
index 0000000..9c55f05
--- /dev/null
+++ b/src/AcpiSensorMain.cpp
@@ -0,0 +1,201 @@
+/*
+// Copyright (c) 2018 Intel Corporation
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#include <Utils.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/asio.hpp>
+#include <chrono>
+#include <ctime>
+#include <iostream>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/asio/sd_event.hpp>
+#include <sdbusplus/bus.hpp>
+#include <sdbusplus/exception.hpp>
+#include <sdbusplus/server.hpp>
+#include <sdbusplus/timer.hpp>
+#include <sensor.hpp>
+#include <systemd/sd-journal.h>
+
+
+static constexpr bool DEBUG = true;
+
+static constexpr char const* ipmiSELService =    "xyz.openbmc_project.Logging.IPMI";
+static constexpr char const* ipmiSELPath = "/xyz/openbmc_project/Logging/IPMI";
+static constexpr char const* ipmiSELAddInterface = "xyz.openbmc_project.Logging.IPMI";
+
+static const std::string ipmiSELAddMessage = "SEL Entry";
+static const std::string sensorPath = "/xyz/openbmc_project/sensors/acpi/ACPI_POWER_STATE";
+
+static constexpr size_t selEvtDataMaxSize = 3;
+
+#define ACPI_OBJECTPATH_BASE "/xyz/openbmc_project/control/host0/acpi_power_state"
+#define ACPI_SERVICE "xyz.openbmc_project.Settings"
+#define ACPI_INTERFACE "xyz.openbmc_project.Control.Power.ACPIPowerState"
+#define PROPERTY_INTERFACE "org.freedesktop.DBus.Properties"
+
+int main()
+{
+    int gpioIndex = -1;
+    bool gpioInverted = false;
+    int baseconfigureflag=0;
+    uint64_t sensorNumber=0;
+    std::string sensorName;
+    std::string sensorInterface;
+    std::string sensorStateNormal;
+    std::string sensorStateActive;
+    std::string sensorProperty;
+    // setup connection to dbus
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    auto objServer = sdbusplus::asio::object_server(systemBus);
+
+    // setup object server, define interface
+    systemBus->request_name("xyz.openbmc_project.AcpiSensor");
+
+    // add acpi interface into sensor tree
+    std::shared_ptr<sdbusplus::asio::dbus_interface> iface =
+        objServer.add_interface(sensorPath,sensorValueInterface);
+
+    double value = 0;
+    //dummy value, just identifier for sdr command   
+    iface->register_property("Value", value);
+    iface->initialize();
+
+    auto PgoodEventMatcherCallback =
+        [systemBus](sdbusplus::message::message& message) {
+            boost::container::flat_map<std::string, std::variant<int>> propertiesChanged;
+            std::string objectName;
+            std::string acpi_state = "xyz.openbmc_project.Control.Power.ACPIPowerState.ACPI.Unknown"; //hyve add for support acpi command
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+
+            if (DEBUG)
+            {
+                std::cout << message.get_path() << " is changed\n";
+            }
+            message.read(objectName, propertiesChanged);
+            std::string event = propertiesChanged.begin()->first;
+            int *pgood = std::get_if<int>(&propertiesChanged.begin()->second);
+
+            if (!pgood)
+            {
+                std::cerr << "event has invalid type\n";
+                return;
+            }
+           
+            if (event == "pgood")
+            {
+                //log SEL
+                acpi_state = (*pgood == 1) ? "xyz.openbmc_project.Control.Power.ACPIPowerState.ACPI.S0_G0_D0" : 
+                                             "xyz.openbmc_project.Control.Power.ACPIPowerState.ACPI.S5_G2";
+                //Hyve++  Update acpi status 
+                auto bus = sdbusplus::bus::new_default();
+                auto method = bus.new_method_call(ACPI_SERVICE, ACPI_OBJECTPATH_BASE,
+                                      PROPERTY_INTERFACE, "Set");
+                method.append(ACPI_INTERFACE,"DevACPIStatus", sdbusplus::message::variant<std::string>(acpi_state));
+                bus.call_noreply(method);
+
+                method = bus.new_method_call(ACPI_SERVICE, ACPI_OBJECTPATH_BASE,
+                                      PROPERTY_INTERFACE, "Set");
+                method.append(ACPI_INTERFACE,"SysACPIStatus", sdbusplus::message::variant<std::string>(acpi_state));
+                bus.call_noreply(method); 
+
+                //++Hyve
+               
+            }
+
+        };
+
+    // After AC reboot , system may missed first power on before bmc init ready, seperated pgood and acpi property to do workaround fix for this issue
+    auto AcpiEventMatcherCallback =
+        [systemBus](sdbusplus::message::message& message) {
+        boost::container::flat_map<std::string, sdbusplus::message::variant<std::string>> propertiesChanged;
+            std::string objectName;
+            uint16_t genid = 0x20;
+            bool assert=1;
+            std::vector<uint8_t> eventData(selEvtDataMaxSize, 0xFF);
+            
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+
+            if (DEBUG)
+            {
+                std::cout << message.get_path() << " is changed\n";
+            }
+            message.read(objectName, propertiesChanged);
+            std::string event = propertiesChanged.begin()->first;
+            auto variant = sdbusplus::message::variant_ns::get_if<std::string>(
+                &propertiesChanged.begin()->second);
+
+            if (event == "SysACPIStatus")
+            {
+                if (*variant == "xyz.openbmc_project.Control.Power.ACPIPowerState.ACPI.S0_G0_D0")
+                {
+                    std::cerr << "System is turn to ACPI S0 state";
+                    eventData[0] = 0;         
+                    
+                }
+                else if (*variant == "xyz.openbmc_project.Control.Power.ACPIPowerState.ACPI.S5_G2")
+                {
+                    std::cerr << "System is turn to ACPI S5 state";
+                    eventData[0] = 5;
+                    
+                }else
+                {
+                    std::cerr << "acpi is in unknown state\n";
+                    return;
+                }
+                sdbusplus::message::message writeSEL = systemBus->new_method_call(
+                            ipmiSELService, ipmiSELPath, ipmiSELAddInterface, "IpmiSelAdd");
+                writeSEL.append(ipmiSELAddMessage,  std::string(sensorPath), eventData, assert,
+                        genid);
+
+                try
+                {
+                    systemBus->call(writeSEL);
+                }
+                    catch (sdbusplus::exception_t& e)
+                {
+                    std::cerr << "call IpmiSelAdd failed\n";
+                }
+            }
+  
+     };
+
+    //event trigger, this can move to poll the gpio service.
+    sdbusplus::bus::match::match PgoodEventMatcher(
+        static_cast<sdbusplus::bus::bus&>(*systemBus),
+        "type='signal',interface='org.freedesktop.DBus.Properties',member='"
+        "PropertiesChanged',arg0namespace='org.openbmc.control.Power'",
+        std::move(PgoodEventMatcherCallback));
+
+     sdbusplus::bus::match::match AcpiEventMatcher(
+        static_cast<sdbusplus::bus::bus&>(*systemBus),
+        "type='signal',interface='org.freedesktop.DBus.Properties',member='"
+        "PropertiesChanged',arg0namespace='xyz.openbmc_project.Control.Power.ACPIPowerState'",
+        std::move(AcpiEventMatcherCallback));
+
+    io.run();
+
+    return 0;
+}
