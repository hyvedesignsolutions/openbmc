diff --git a/arch/arm/mach-aspeed/Makefile b/arch/arm/mach-aspeed/Makefile
old mode 100644
new mode 100755
index 7d8930b..9b9da32
--- a/arch/arm/mach-aspeed/Makefile
+++ b/arch/arm/mach-aspeed/Makefile
@@ -11,7 +11,7 @@
 #
 
 
-obj-y += timer.o reset.o cpuinfo.o ast-scu.o ast-ahbc.o ast-sdmc.o
+obj-y += timer.o reset.o cpuinfo.o ast-scu.o ast-ahbc.o ast-sdmc.o ast_i2c.o
 obj-$(CONFIG_AST_SPI_NOR) += flash.o
 obj-$(CONFIG_ARCH_AST2500) += platform_g5.o
 obj-$(CONFIG_ARCH_AST2400) += platform_g4.o
diff --git a/arch/arm/mach-aspeed/ast_i2c.c b/arch/arm/mach-aspeed/ast_i2c.c
new file mode 100755
index 0000000..567b193
--- /dev/null
+++ b/arch/arm/mach-aspeed/ast_i2c.c
@@ -0,0 +1,340 @@
+#include <common.h>
+#include <i2c.h>
+#include <asm/processor.h>
+#include <asm/io.h>
+#include <asm/arch/regs-ahbc.h>
+#include <asm/arch/ast-ahbc.h>
+#include <asm/arch/aspeed.h>
+
+
+#define AST_I2C_REG_BASE			0x1E78A000 /* I2C controller registers base address */
+#define AST_SCU_BASE                    0x1E6E2000
+#define AST_SCU_VA_BASE                 AST_SCU_BASE
+#define SCU_KEY_CONTROL_REG                (AST_SCU_VA_BASE +  0x00)
+#define SCU_SYS_RESET_REG               (AST_SCU_VA_BASE +  0x04)
+
+/* I2C device registers offset */
+#define I2C_DISR	AST_I2C_REG_BASE 			  /* I2C controller device interrupt status register */
+#define I2C_FCR		(i2c_bus_base_addr + 0x00) /* function control register */
+#define I2C_CATCR1	(i2c_bus_base_addr + 0x04) /* clock and AT timming control register 1 */
+#define I2C_CATCR2	(i2c_bus_base_addr + 0x08) /* clock and AT timming control register 2 */
+#define I2C_ICR		(i2c_bus_base_addr + 0x0C) /* interrupt control register */
+#define I2C_ISR		(i2c_bus_base_addr + 0x10) /* interrupt status register */
+#define I2C_CSR		(i2c_bus_base_addr + 0x14) /* command/status register */
+#define I2C_DR		(i2c_bus_base_addr + 0x18) /* device address register */
+#define I2C_BCR		(i2c_bus_base_addr + 0x1C) /* buffer control register */
+#define I2C_TRBB	(i2c_bus_base_addr + 0x20) /* transmit/receive byte buffer */
+#define I2C_DMCR	(i2c_bus_base_addr + 0x24) /* DMA mode control register */
+#define I2C_DMSR	(i2c_bus_base_addr + 0x28) /* DMA mode status register */
+
+
+
+
+/*----------------------------------------------------------------------------------------------*/
+/*------------------------------------  Common stuff for All SOC -------------------------------*/ 
+/*----------------------------------------------------------------------------------------------*/
+
+static void real_i2c_init (int speed, int slaveadd);
+static int i2c_init_pending= 1;
+
+static int i2c_bus_base_addr   = 0;
+static int i2c_bus_num = 0;
+
+#ifdef CONFIG_SYS_I2C_SLAVE
+static int i2c_bus_slaveaddr   = CONFIG_SYS_I2C_SLAVE;
+#else
+static int i2c_bus_slaveaddr   = 0x20;		/* Default BMC Address */
+#endif
+#ifdef CONFIG_SYS_I2C_SPEED
+static int i2c_bus_speed  = CONFIG_SYS_I2C_SPEED;
+#else
+static int i2c_bus_speed  = 100000;		/* Default 100Khz */
+#endif
+
+
+unsigned int i2c_get_bus_speed(void)
+{
+	return i2c_bus_speed;	
+}
+
+unsigned int i2c_set_bus_speed(unsigned int speed)
+{
+	i2c_bus_speed = speed;
+	real_i2c_init(i2c_bus_speed,i2c_bus_slaveaddr);
+	return 0;
+}
+
+unsigned int i2c_get_bus_num(void)
+{
+	return i2c_bus_num;
+}
+
+int i2c_set_bus_num(unsigned int bus)
+{
+	i2c_bus_num = bus;
+	real_i2c_init(i2c_bus_speed,i2c_bus_slaveaddr);
+	return 0;
+}
+
+#if 0 /* Already defined in i2c.h */
+uchar i2c_reg_read(uchar i2c_addr, uchar reg)
+{
+	unsigned char buf;
+	i2c_read(i2c_addr, reg, 1, &buf, 1);
+	return buf;
+}
+
+void i2c_reg_write(uchar i2c_addr, uchar reg, uchar val)
+{
+	i2c_write(i2c_addr, reg, 1, &val, 1);
+	return;
+}
+#endif
+
+/*----------------------------------------------------------------------------------------------*/
+
+
+/*----------------------------------------------------------------------------------------------*/
+/* ---------------------  i2c interface functions (SOC Specific --------------------------------*/ 
+/*----------------------------------------------------------------------------------------------*/
+
+static int i2c_start(unsigned char chip, unsigned char read_write);
+static void i2c_stop(void);
+static unsigned long i2c_interrupt_status(void);
+static int i2c_send_byte(unsigned char byte);
+static int i2c_receive_byte(unsigned char *byte, int last);
+
+/* I2C operations */
+#define I2C_WRITE 0
+#define I2C_READ 1
+
+void i2c_init (int speed, int slaveadd)
+{
+	/* This is called before relocation and hence we cannot access global variables */
+	return;
+}
+
+void i2c_init_all (void)
+{
+	/* This is called before relocation and hence we cannot access global variables */
+	return;
+}
+
+static void real_i2c_init (int speed, int slaveadd)
+{
+	volatile unsigned long scu_reg;
+
+	/* Calculate bus address based on bus number */
+	if (i2c_bus_num  >= 7)   
+		i2c_bus_base_addr = 	(AST_I2C_REG_BASE + 0x100 + (0x040 * (i2c_bus_num + 1)));
+	else
+		i2c_bus_base_addr = 	(AST_I2C_REG_BASE + (0x040 * (i2c_bus_num + 1)));
+
+	*((volatile ulong *) SCU_KEY_CONTROL_REG) = 0x1688A8A8; /* unlock SCU */
+
+	if (i2c_bus_num >=13)
+	{
+		scu_reg = *((volatile ulong*) (AST_SCU_VA_BASE+ 0x90));
+		*((volatile ulong*) (AST_SCU_VA_BASE+ 0x90)) = scu_reg | (0x4000 << i2c_bus_num); /*enable multi function pin*/
+ 	}
+	else if (i2c_bus_num >=9)
+	{
+		scu_reg = *((volatile ulong*) (AST_SCU_VA_BASE+ 0x90));
+		*((volatile ulong*) (AST_SCU_VA_BASE+ 0x90)) = (scu_reg & ~1) | (0x4000 << i2c_bus_num); /*enable multi function pin*/
+	}
+	else if (i2c_bus_num >=2)
+	{
+		scu_reg = *((volatile ulong*) (AST_SCU_VA_BASE+ 0x90));
+		*((volatile ulong*) (AST_SCU_VA_BASE+ 0x90)) = scu_reg | (0x4000 << i2c_bus_num); /*enable multi function pin*/
+ 	}
+
+	/* stop I2C controller reset */
+	scu_reg = *((volatile ulong *) SCU_SYS_RESET_REG);
+	*((volatile ulong *) SCU_SYS_RESET_REG) = scu_reg & ~(0x04);
+
+//	*((volatile ulong *) SCU_KEY_CONTROL_REG) = 0; /* lock SCU */
+
+    /* Set Clock and AC timing Control Register 1 and 2 */
+    /* the divisor is 256 */
+	*((volatile unsigned long *) I2C_CATCR1) = 0x77777344;
+	*((volatile unsigned long *) I2C_CATCR2) = 0x00000000;
+
+    /* Set Slave address */
+    *((volatile unsigned long *) I2C_DR) = slaveadd;
+
+    /* Clear Interrupt Status register */
+    *((volatile unsigned long *) I2C_ISR) = 0xFFFFFFFF; /* write 1 to clear bits */
+
+    /* Set Master or Slave mode */
+    *((volatile unsigned long *) I2C_FCR) = 0x01; /* master function enable only */
+
+    /* Set Interrupt Control register */
+	*((volatile unsigned long *) I2C_ICR) = 0x0000002F;
+
+	i2c_init_pending=0;
+}
+
+int i2c_probe(uchar chip)
+{
+	int ret;
+
+	real_i2c_init(i2c_bus_speed,i2c_bus_slaveaddr);
+
+	ret = 0;
+	if (i2c_start(chip, I2C_WRITE)) /* Do not use I2C_READ or the bus will be blocked by salve */
+		ret = 1;
+
+	i2c_stop();
+
+	return ret;
+}
+
+int i2c_read(uchar chip, uint addr, int alen, uchar *buffer, int len)
+{
+	int i;
+	int last;
+	int ret;
+
+	ret = 0;
+
+	if (i2c_init_pending)
+		real_i2c_init(i2c_bus_speed,i2c_bus_slaveaddr);
+
+	if (i2c_start(chip, I2C_WRITE))
+		return 1;
+
+	for (i = 0; i < alen; i ++) 
+	{
+		if (i2c_send_byte((addr >> ((alen -1 - i) * 8)) & 0xFF)) 
+		{
+			return 1;
+		}
+	}
+
+	if (i2c_start(chip, I2C_READ))
+		return 1;
+
+	for (i = 0; i < len; i ++) 
+	{
+		last = (i < (len - 1)) ? 0 : 1;
+		if (i2c_receive_byte(&(buffer[i]), last)) 
+		{
+			ret = 1;
+		}
+	}
+
+	i2c_stop();
+
+	return ret;
+}
+
+int i2c_write(uchar chip, uint addr, int alen, uchar *buffer, int len)
+{
+	int i;
+	//int last;
+	int ret;
+
+	ret = 0;
+
+	if (i2c_init_pending)
+		real_i2c_init(i2c_bus_speed,i2c_bus_slaveaddr);
+
+	if (i2c_start(chip, I2C_WRITE))
+		return 1;
+
+	for (i = 0; i < alen; i ++) 
+	{
+		if (i2c_send_byte((addr >> ((alen -1 - i) * 8)) & 0xFF)) 
+		{
+			return 1;
+		}
+	}
+
+	for (i = 0; i < len; i ++) 
+	{
+		//last = (i < (len - 1)) ? 0 : 1;
+		if (i2c_send_byte(buffer[i])) 
+		{
+			ret = 1;
+		}
+	}
+
+	i2c_stop();
+
+	return ret;
+}
+
+/*----------------------------------------------------------------------------------------------*/
+/* ---------------------  i2c internal fuctions for SOC         --------------------------------*/ 
+/*----------------------------------------------------------------------------------------------*/
+static int i2c_send_byte(unsigned char byte)
+{
+	*((volatile unsigned long *) I2C_TRBB) = byte & 0x000000FF;
+	*((volatile unsigned long *) I2C_CSR) = 0x02; /* master transmit command */
+
+	if (!(i2c_interrupt_status() & 0x01)) { /* transmit done with ACK returned */
+		return 1;
+	}
+
+    return 0;
+}
+
+static int i2c_receive_byte(unsigned char *byte, int last)
+{
+	*((volatile unsigned long *) I2C_CSR) = 0x08 | (last << 4); /* master receive command, master/slave receive command last */
+
+	if (!(i2c_interrupt_status() & 0x04)) { /* receive done interrupt */
+		return 1;
+	}
+
+	*byte = (unsigned char) ((*((volatile unsigned long *) I2C_TRBB) & 0x0000FF00) >> 8);
+
+	return 0;
+}
+
+static int i2c_start(unsigned char chip, unsigned char read_write)
+{
+	*((volatile unsigned long *) I2C_TRBB) = (chip  << 1) | (read_write & 0x1); /* load address to buffer and specify read/write */
+	*((volatile unsigned long *) I2C_CSR) = 0x03; /* master start command, master transmit command */
+
+	if (i2c_interrupt_status() & 0x01) { /* transmit done with ACK returned interrupt */
+		return 0;
+	}
+
+	return 1;
+}
+
+static void i2c_stop(void)
+{
+	*((volatile unsigned long *) I2C_CSR) = 0x0030; /* master stop command */
+}
+
+static unsigned long i2c_interrupt_status(void)
+{
+	unsigned long isr; /* device interrupt status register */
+	unsigned long device_bit;
+	unsigned long interrup_status;
+	long i;
+
+	interrup_status = 0;
+	
+	for (i = 0; i < 100000; i ++) { /* poll device interrupt status */
+		isr = *((volatile unsigned long *) I2C_DISR);
+
+		device_bit = 0x01 << i2c_bus_num;
+		if ((isr & device_bit) != 0) { /* interrupt occurs */
+			interrup_status = *((volatile unsigned long *) I2C_ISR);
+			break;
+		}
+	}
+
+	#if 0
+	if (i == 100000)
+		printf("i2c time out! ISR = 0x%X\n", *((volatile unsigned long *) I2C_ISR]);
+	#endif
+
+	*((volatile unsigned long *) I2C_ISR) = 0xFFFFFFFF; /* clear bits */
+
+	return interrup_status;
+}
+
diff --git a/cmd/Kconfig b/cmd/Kconfig
old mode 100644
new mode 100755
index d69b817..319a0d4
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -388,6 +388,11 @@ config CMD_I2C
 	help
 	  I2C support.
 
+config CMD_EEPROM
+	bool "eeprom"
+	help
+	  eeprom support.
+
 config CMD_USB
 	bool "usb"
 	help
diff --git a/cmd/Makefile b/cmd/Makefile
old mode 100644
new mode 100755
diff --git a/cmd/i2c.c b/cmd/i2c.c
old mode 100644
new mode 100755
index 18ce789..309f7b3
--- a/cmd/i2c.c
+++ b/cmd/i2c.c
@@ -1697,7 +1697,7 @@ static void show_bus(struct udevice *bus)
  *
  * Returns zero always.
  */
-#if defined(CONFIG_SYS_I2C) || defined(CONFIG_DM_I2C)
+#if !defined(CONFIG_AST_I2C) && (defined(CONFIG_SYS_I2C) || defined(CONFIG_DM_I2C))
 static int do_i2c_show_bus(cmd_tbl_t *cmdtp, int flag, int argc,
 				char * const argv[])
 {
@@ -1806,6 +1806,7 @@ static int do_i2c_bus_num(cmd_tbl_t *cmdtp, int flag, int argc,
 		printf("Current bus is %d\n", bus_no);
 	} else {
 		bus_no = simple_strtoul(argv[1], NULL, 10);
+		printf("Got bus is %d[%d]\n", bus_no, CONFIG_SYS_NUM_I2C_BUSES);
 #if defined(CONFIG_SYS_I2C)
 		if (bus_no >= CONFIG_SYS_NUM_I2C_BUSES) {
 			printf("Invalid bus %d\n", bus_no);
@@ -1920,7 +1921,8 @@ static int do_i2c_reset(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv
 		return CMD_RET_FAILURE;
 	}
 #elif defined(CONFIG_SYS_I2C)
-	i2c_init(I2C_ADAP->speed, I2C_ADAP->slaveaddr);
+//	i2c_init(I2C_ADAP->speed, I2C_ADAP->slaveaddr);
+	i2c_init(CONFIG_SYS_I2C_SPEED, CONFIG_SYS_I2C_SLAVE);
 #else
 	i2c_init(CONFIG_SYS_I2C_SPEED, CONFIG_SYS_I2C_SLAVE);
 #endif
@@ -1928,7 +1930,7 @@ static int do_i2c_reset(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv
 }
 
 static cmd_tbl_t cmd_i2c_sub[] = {
-#if defined(CONFIG_SYS_I2C) || defined(CONFIG_DM_I2C)
+#if !defined(CONFIG_AST_I2C) && (defined(CONFIG_SYS_I2C) || defined(CONFIG_DM_I2C))
 	U_BOOT_CMD_MKENT(bus, 1, 1, do_i2c_show_bus, "", ""),
 #endif
 	U_BOOT_CMD_MKENT(crc32, 3, 1, do_i2c_crc, "", ""),
@@ -2004,7 +2006,7 @@ static int do_i2c(cmd_tbl_t * cmdtp, int flag, int argc, char * const argv[])
 /***************************************************/
 #ifdef CONFIG_SYS_LONGHELP
 static char i2c_help_text[] =
-#if defined(CONFIG_SYS_I2C) || defined(CONFIG_DM_I2C)
+#if !defined(CONFIG_AST_I2C) && (defined(CONFIG_SYS_I2C) || defined(CONFIG_DM_I2C))
 	"bus [muxtype:muxaddr:muxchannel] - show I2C bus info\n"
 #endif
 	"crc32 chip address[.0, .1, .2] count - compute CRC32 checksum\n"
diff --git a/configs/ast_g5_ncsi_defconfig b/configs/ast_g5_ncsi_defconfig
old mode 100644
new mode 100755
index 74029ed..5c31d57
--- a/configs/ast_g5_ncsi_defconfig
+++ b/configs/ast_g5_ncsi_defconfig
@@ -1,6 +1,6 @@
 CONFIG_ARM=y
 CONFIG_TARGET_AST_G5=y
-CONFIG_SYS_PROMPT="ast# "
+CONFIG_SYS_PROMPT="astn# "
 CONFIG_CMD_BOOTEFI=n
 CONFIG_CMD_DHCP=y
 CONFIG_CMD_PING=y
@@ -11,3 +11,5 @@ CONFIG_HUSH_PARSER=y
 CONFIG_OF_LIBFDT=y
 CONFIG_SPI_FLASH=y
 CONFIG_SYS_NS16550=y
+CONFIG_CMD_I2C=y
+CONFIG_SYS_I2C=y
diff --git a/configs/ast_g5_phy_defconfig b/configs/ast_g5_phy_defconfig
old mode 100644
new mode 100755
index 767f3af..65de360
--- a/configs/ast_g5_phy_defconfig
+++ b/configs/ast_g5_phy_defconfig
@@ -1,7 +1,7 @@
 CONFIG_ARM=y
 CONFIG_TARGET_AST_G5=y
 CONFIG_ASPEED_NET_PHY=y
-CONFIG_SYS_PROMPT="ast# "
+CONFIG_SYS_PROMPT="astp# "
 CONFIG_CMD_BOOTEFI=n
 CONFIG_CMD_DHCP=y
 CONFIG_CMD_PING=y
@@ -12,3 +12,6 @@ CONFIG_HUSH_PARSER=y
 CONFIG_OF_LIBFDT=y
 CONFIG_SPI_FLASH=y
 CONFIG_SYS_NS16550=y
+CONFIG_CMD_I2C=y
+CONFIG_SYS_I2C=y
+CONFIG_CMD_EEPROM=y
diff --git a/drivers/Makefile b/drivers/Makefile
old mode 100644
new mode 100755
index 1723958..4175455
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -43,6 +43,7 @@ obj-$(CONFIG_SPL_MMC_SUPPORT) += block/
 else
 
 obj-y += adc/
+obj-y += i2c/
 obj-$(CONFIG_DM_DEMO) += demo/
 obj-$(CONFIG_BIOSEMU) += bios_emulator/
 obj-y += block/
diff --git a/drivers/i2c/Makefile b/drivers/i2c/Makefile
old mode 100644
new mode 100755
index 167424d..f38a156
--- a/drivers/i2c/Makefile
+++ b/drivers/i2c/Makefile
@@ -15,7 +15,7 @@ obj-$(CONFIG_I2C_MV) += mv_i2c.o
 obj-$(CONFIG_PCA9564_I2C) += pca9564_i2c.o
 obj-$(CONFIG_TSI108_I2C) += tsi108_i2c.o
 obj-$(CONFIG_SH_SH7734_I2C) += sh_sh7734_i2c.o
-obj-$(CONFIG_SYS_I2C) += i2c_core.o
+#obj-$(CONFIG_SYS_I2C) += i2c_core.o
 obj-$(CONFIG_SYS_I2C_CADENCE) += i2c-cdns.o
 obj-$(CONFIG_SYS_I2C_DAVINCI) += davinci_i2c.o
 obj-$(CONFIG_SYS_I2C_DW) += designware_i2c.o
@@ -41,5 +41,4 @@ obj-$(CONFIG_SYS_I2C_TEGRA) += tegra_i2c.o
 obj-$(CONFIG_SYS_I2C_UNIPHIER) += i2c-uniphier.o
 obj-$(CONFIG_SYS_I2C_UNIPHIER_F) += i2c-uniphier-f.o
 obj-$(CONFIG_SYS_I2C_ZYNQ) += zynq_i2c.o
-
 obj-$(CONFIG_I2C_MUX) += muxes/
diff --git a/drivers/net/ftgmac100.c b/drivers/net/ftgmac100.c
old mode 100644
new mode 100755
index 5779057..d8e2580
--- a/drivers/net/ftgmac100.c
+++ b/drivers/net/ftgmac100.c
@@ -483,7 +483,7 @@ static void ftgmac100_set_mac(struct eth_device *dev,
 
 static void ftgmac100_set_mac_from_env(struct eth_device *dev)
 {
-#ifdef CONFIG_SYS_I2C_MAC_OFFSET
+#ifdef CONFIG_AST_I2C_MAC_OFFSET
 
 	char *s;
     int i, env;                // env variable 0: eeprom, 1: environment parameters
@@ -492,32 +492,32 @@ static void ftgmac100_set_mac_from_env(struct eth_device *dev)
 	env = (s && (*s == 'y')) ? 1 : 0;
 
 	if (env) {
-		printf("TODO ... eerprom --> \n");
-	    eeprom_init();
-		i2c_set_bus_num(3);
-	    eeprom_read(CONFIG_SYS_I2C_EEPROM_ADDR, CONFIG_SYS_I2C_MAC_OFFSET, dev->enetaddr, 6);
+		  //printf("ftgmac set MAC from eerprom -->eth[%d] \n", dev->index);
+	    eeprom_init(CONFIG_SYS_I2C_EEPROM_BUS);
+	    eeprom_read(CONFIG_SYS_I2C_EEPROM_ADDR, (CONFIG_AST_I2C_MAC_OFFSET + (6*dev->index)), dev->enetaddr, 6);
 
 		for (i = 0; i < 6; i++) {
+		  //printf("%x ", dev->enetaddr[i]);
 		    if (dev->enetaddr[i] != 0xFF) {
 		        env = 0;	//Suppose not all 0xFF is valid
 		    }
 		}
+		//printf("\n");
+	  eth_setenv_enetaddr_by_index("eth", dev->index, dev->enetaddr);
 	}
-
-	if(env)
-		eth_getenv_enetaddr_by_index("eth", dev->index, dev->enetaddr);
-//		eth_setenv_enetaddr("ethaddr", dev->enetaddr);
-	else
+	
+	if (env == 0) {
 		eth_getenv_enetaddr_by_index("eth", dev->index, dev->enetaddr);
 //		eth_getenv_enetaddr("ethaddr", dev->enetaddr);
-
-	ftgmac100_set_mac(dev, dev->enetaddr);
+	}
 #else
+
 	eth_getenv_enetaddr_by_index("eth", dev->index, dev->enetaddr);
 //	eth_getenv_enetaddr("ethaddr", dev->enetaddr);
-	ftgmac100_set_mac(dev, dev->enetaddr);
 #endif
 
+	ftgmac100_set_mac(dev, dev->enetaddr);
+
 }
 
 /*
@@ -544,7 +544,7 @@ static int ftgmac100_init(struct eth_device *dev, bd_t *bd)
 	unsigned int maccr;
 	int i;
 
-	debug("%s()\n", __func__);
+	//debug("%s()\n", __func__);
 
 	//Ryan Add
 	ftgmac100_reset(dev);
diff --git a/include/configs/ast-common.h b/include/configs/ast-common.h
old mode 100644
new mode 100755
index a024308..87d7e92
--- a/include/configs/ast-common.h
+++ b/include/configs/ast-common.h
@@ -77,7 +77,7 @@
  */
 #define CONFIG_SYS_LONGHELP
 #define CONFIG_SYS_CBSIZE		256		/* Console I/O Buffer Size */
-#define CONFIG_SYS_PROMPT		"ast# "
+/* #define CONFIG_SYS_PROMPT		"ast# " */
 
 /* Print Buffer Size */
 #define CONFIG_SYS_PBSIZE		(CONFIG_SYS_CBSIZE + sizeof(CONFIG_SYS_PROMPT) + 16)
@@ -117,6 +117,22 @@
 #define ASPEED_ENV_SETTINGS \
 	"verify=yes\0"	\
 	"spi_dma=yes\0" \
+	"eeprom=yes\0" \
+	"ethaddr=00:11:22:33:44:55\0" \
+	"eth1addr=00:11:22:33:44:56\0" \
+	"ethact=FTGMAC100#1" \
 	""
 
+#define CONFIG_SYS_I2C_SPEED  100000
+#define CONFIG_SYS_I2C_SLAVE  0x20
+#define CONFIG_SYS_I2C        1
+#define CONFIG_AST_I2C        1
+#define CONFIG_SYS_NUM_I2C_BUSES  14
+
+#define CONFIG_SYS_I2C_EEPROM_ADDR_LEN 2
+#define CONFIG_SYS_I2C_EEPROM_ADDR  0x50  //7-bit
+#define CONFIG_SYS_I2C_EEPROM_BUS   6
+#define CONFIG_SYS_EEPROM_PAGE_WRITE_DELAY_MS 5
+#define CONFIG_AST_I2C_MAC_OFFSET (0x1F00 - 6)  // start from 1st MAC
+
 #endif	/* __AST_COMMON_CONFIG_H */
diff --git a/include/i2c.h b/include/i2c.h
old mode 100644
new mode 100755
index d500445..930ddf6
--- a/include/i2c.h
+++ b/include/i2c.h
@@ -561,7 +561,9 @@ void i2c_dump_msgs(struct i2c_msg *msg, int nmsgs);
 /* no muxes used bus = i2c adapters */
 #define CONFIG_SYS_I2C_DIRECT_BUS	1
 #define CONFIG_SYS_I2C_MAX_HOPS		0
+#if !defined(CONFIG_AST_I2C)
 #define CONFIG_SYS_NUM_I2C_BUSES	ll_entry_count(struct i2c_adapter, i2c)
+#endif
 #else
 /* we use i2c muxes */
 #undef CONFIG_SYS_I2C_DIRECT_BUS
diff --git a/net/eth_common.c b/net/eth_common.c
old mode 100644
new mode 100755
